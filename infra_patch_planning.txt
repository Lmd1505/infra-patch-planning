# infra-patch-planning

RepositÃ³rio com **templates e exemplos** para planejamento de patches em ambientes de infraestrutura.

## ğŸ“Œ Estrutura
```
infra-patch-planning/
â”œâ”€â”€ README.md                # Explica o projeto e como usar
â”œâ”€â”€ templates/
â”‚   â”œâ”€â”€ patch_plan_template.md   # Modelo em Markdown
â”‚   â”œâ”€â”€ checklist_template.md    # Checklist padrÃ£o de prÃ©/mudanÃ§a/rollback
â”œâ”€â”€ examples/
â”‚   â”œâ”€â”€ patch_plan_oct_nov_2025.pdf # Exemplo real (desafio)
â”‚   â””â”€â”€ gantt_patch_schedule.png    # Cronograma Gantt
â””â”€â”€ scripts/
    â””â”€â”€ generate_gantt.py       # Script em Python para gerar cronograma visual
```

## ğŸš€ Objetivo
Facilitar a criaÃ§Ã£o de planos de patch estruturados, com:
- Modelos prontos de planos (Markdown, Word, Excel)
- Checklists de prÃ© e pÃ³s mudanÃ§a
- Scripts para gerar cronogramas visuais (Gantt)
- Exemplos reais

## ğŸ“– Como usar
1. Copie o `patch_plan_template.md` e preencha com suas informaÃ§Ãµes.
2. Use o `checklist_template.md` para validar prÃ© e pÃ³s mudanÃ§as.
3. Execute o script `scripts/generate_gantt.py` para gerar o grÃ¡fico do cronograma.

---

# ğŸ“‘ Templates

## `templates/patch_plan_template.md`
```markdown
# Plano de Patch â€“ [PerÃ­odo]
**ResponsÃ¡vel:** [Seu Nome]  
**PerÃ­odo:** [Data inÃ­cio â€“ Data fim]  
**VersÃ£o:** 1.0

---

## ğŸ”¹ BLUF (Resumo)
Escreva aqui em 5â€“7 linhas o resumo estratÃ©gico do plano.

---

## ğŸ”¹ CalendÃ¡rio de Patches
| Data/Hora | Ambiente | InstÃ¢ncia | Tipo de Patch | Reboot? | ResponsÃ¡vel | ObservaÃ§Ãµes |
|-----------|----------|-----------|---------------|---------|-------------|-------------|
| [dd/mm]   | PROD     | node-01   | Kernel        | Sim     | Fulano      | Aviso 72h |

---

## ğŸ”¹ Checklist de PrÃ©-Checagens
- [ ] Backup validado
- [ ] AprovaÃ§Ã£o do negÃ³cio
- [ ] Baseline de mÃ©tricas coletado
- [ ] Recursos on-call confirmados
- [ ] Aviso enviado â‰¥72h

---

## ğŸ”¹ CritÃ©rios de Rollback
- Erros acima de 5% do trÃ¡fego por 10min
- LatÃªncia 2x maior que baseline
- ServiÃ§os nÃ£o retornam apÃ³s 3 tentativas
- Smoke tests falharem

Rollback: restaurar snapshot, reverter patch, validar saÃºde

---

## ğŸ”¹ Testes PÃ³s-MudanÃ§a
- Smoke tests (login, transaÃ§Ãµes crÃ­ticas)
- Monitoramento (CPU, memÃ³ria, erros)
- Logs de aplicaÃ§Ã£o
- IntegraÃ§Ã£o com sistemas externos

---

## ğŸ”¹ Contatos de EmergÃªncia
- ResponsÃ¡vel Patch: [Nome / Contato]
- DBA On-call: [Nome / Contato]
- SRE On-call: [Nome / Contato]
- Gerente de NegÃ³cio: [Nome / Contato]
```

---

## `templates/checklist_template.md`
```markdown
# Checklist de MudanÃ§a (Patch)

## ğŸ”¹ PrÃ©-MudanÃ§a
- [ ] Backup/snapshot criado e validado
- [ ] Plano de rollback documentado
- [ ] AprovaÃ§Ã£o do dono do processo
- [ ] Baseline de mÃ©tricas coletado
- [ ] Aviso enviado â‰¥72h antes

## ğŸ”¹ ExecuÃ§Ã£o
- [ ] NÃ³ removido do balanceador
- [ ] AplicaÃ§Ã£o de patch iniciada
- [ ] Reboot (se necessÃ¡rio)
- [ ] ValidaÃ§Ã£o inicial concluÃ­da

## ğŸ”¹ PÃ³s-MudanÃ§a
- [ ] NÃ³ reinserido no balanceador
- [ ] Smoke tests executados
- [ ] Monitoramento normalizado
- [ ] Logs sem novos erros crÃ­ticos
- [ ] ConfirmaÃ§Ã£o enviada ao negÃ³cio
```

---

## `scripts/generate_gantt.py`
```python
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime

# Exemplo de patches
patches = [
    ("07/10/2025", "PROD - prod-pay-01 (Kernel)"),
    ("14/10/2025", "PROD - prod-pay-02 (Kernel)"),
    ("21/10/2025", "PROD - prod-orders-01 (DB)"),
    ("28/10/2025", "PROD - prod-orders-02 (DB)"),
    ("04/11/2025", "HOM - hom-pay-01 (Kernel)"),
    ("11/11/2025", "HOM - hom-orders-01 (DB)"),
    ("18/11/2025", "DEV - dev-pay-01 (Kernel)"),
    ("25/11/2025", "DEV - dev-orders-01 (DB)"),
]

# Converter para DataFrame
df = pd.DataFrame(patches, columns=["Data", "Atividade"])
df["Data"] = pd.to_datetime(df["Data"], format="%d/%m/%Y")

# Plot estilo Gantt simplificado
plt.figure(figsize=(12, 6))
plt.barh(df["Atividade"], [1]*len(df), left=df["Data"].map(datetime.toordinal), height=0.5, color="skyblue")

# Ajustes visuais
plt.xlabel("Data")
plt.title("Cronograma de Patches (Exemplo)", fontsize=14, weight="bold")
plt.xticks(df["Data"].map(datetime.toordinal), df["Data"].dt.strftime("%d/%m"), rotation=45)
plt.grid(axis="x", linestyle="--", alpha=0.6)

# Exportar grÃ¡fico
plt.tight_layout()
plt.savefig("gantt_patch_schedule.png")
plt.show()
